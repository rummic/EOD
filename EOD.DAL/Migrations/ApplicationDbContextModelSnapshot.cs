// <auto-generated />
using System;
using EOD.DAL.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EOD.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EOD.DAL.Model.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("SendDate");

                    b.Property<int?>("SenderId");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SenderId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("EOD.DAL.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EOD.DAL.Model.Document", b =>
                {
                    b.Property<string>("Path")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseId");

                    b.Property<string>("Comment");

                    b.Property<string>("Status");

                    b.Property<int?>("TypeId");

                    b.HasKey("Path");

                    b.HasIndex("CaseId");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EOD.DAL.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("EOD.DAL.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<byte[]>("Password");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "asd@asd.com",
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Kowalski",
                            Login = "superadmin",
                            Password = new byte[] { 50, 202, 117, 238, 254, 91, 241, 184, 18, 0, 14, 84, 199, 143, 114, 61, 237, 10, 250, 119, 167, 181, 92, 236, 78, 90, 127, 92, 77, 165, 247, 166 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 124, 238, 37, 234, 13, 7, 139, 65, 82, 49, 110, 57, 237, 26, 182, 101, 4, 255, 101, 52, 159, 8, 236, 238, 222, 71, 203, 205, 221, 200 }
                        });
                });

            modelBuilder.Entity("EOD.DAL.Model.Case", b =>
                {
                    b.HasOne("EOD.DAL.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("EOD.DAL.Model.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("EOD.DAL.Model.Department", b =>
                {
                    b.HasOne("EOD.DAL.Model.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("EOD.DAL.Model.Document", b =>
                {
                    b.HasOne("EOD.DAL.Model.Case", "Case")
                        .WithMany("Documents")
                        .HasForeignKey("CaseId");

                    b.HasOne("EOD.DAL.Model.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("EOD.DAL.Model.DocumentType", b =>
                {
                    b.HasOne("EOD.DAL.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("EOD.DAL.Model.User", b =>
                {
                    b.HasOne("EOD.DAL.Model.Department")
                        .WithMany("Workers")
                        .HasForeignKey("DepartmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
